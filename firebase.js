const firebaseConfig = {
    apiKey: "AIzaSyAzP9SYJDFGZ4pzEI84rmNgd1fjvZ5yw1I",
    authDomain: "gti-felipe.firebaseapp.com",
    databaseURL: "https://gti-felipe-default-rtdb.firebaseio.com",
    projectId: "gti-felipe",
    storageBucket: "gti-felipe.appspot.com",
    messagingSenderId: "683033211368",
    appId: "1:683033211368:web:16ae4d76db6bcfe845745d"
};

//Inicializando o Firebase
firebase.initializeApp(firebaseConfig)
//Definindo a URL padr√£o do site
const urlApp = 'http://127.0.0.1:5500';

function logaGoogle() {
    //alert('voc√™ cliclou!üòâ') //Tecla Windows + . para inserir emoji
    const provider = new firebase.auth.GoogleAuthProvider()
    firebase.auth().signInWithPopup(provider)
        .then((result) => {
            window.location.href = 'menu.html'//redireciona para outra p√°gina
        }).catch((error) => {
            alert(`Erro ao efetuar login: ${error.message}`)
        })
}
// Fun√ß√£o para lidar com o login usando e-mail e senha
function logaEmail(event) {
    event.preventDefault(); // Impede o comportamento padr√£o do evento (por exemplo, envio de formul√°rio)

    // Obt√©m o valor do campo de entrada de e-mail
    const email = document.getElementById('email').value;

    // Obt√©m o valor do campo de entrada de senha
    const senha = document.getElementById('senha').value;

    // Utiliza o m√©todo de autentica√ß√£o do Firebase para fazer login com e-mail e senha
    firebase.auth().signInWithEmailAndPassword(email, senha)
        .then(response => {
            // Se o login for bem-sucedido, redireciona para a p√°gina "menu.html"
            window.location.href = "menu.html";
        }).catch(function (error) {
            // Se houver um erro durante o login, exibe um alerta com uma mensagem de erro
            alert(`N√£o foi poss√≠vel logar o usu√°rio: ${errors[error.code]}`);
        });
}

function cadastrar(event) {
    event.preventDefault();

    const button = document.getElementById('cadast');
    const email = document.getElementById('em@il').value;
    const senha = document.getElementById('senh@').value;
    const Csenha = document.getElementById('Csenha').value;
    const nome = document.getElementById('name').value;
    const curso = document.getElementById('cursos').value;
    const nasc = document.getElementById('nasc').value;
    const genero = document.getElementById('genero').value;
    const fotoPerfil = document.getElementById('fotoPerfil').files[0];

    // Verifica se os campos obrigat√≥rios est√£o preenchidos
    if (email.trim() === '' || senha.trim() === '' || Csenha.trim() === '' || nome.trim() === '' || nasc.trim() === '') {
        alert('Por favor, preencha todos os campos obrigat√≥rios.');
        return;
    }

    // Verifica se as senhas correspondem
    if (senha !== Csenha) {
        alert('As senhas n√£o correspondem!');
        return;
    }

    // Verifica se uma imagem foi selecionada e sua extens√£o
    if (fotoPerfil) {
        const allowedExtensions = ['jpg', 'jpeg', 'png', 'gif'];
        const fileExtension = fotoPerfil.name.split('.').pop().toLowerCase();
        if (!allowedExtensions.includes(fileExtension)) {
            alert('Por favor, selecione uma imagem v√°lida (jpg, jpeg, png, gif).');
            return;
        }
    }

    // Altera o texto do bot√£o para indicar que o cadastro est√° sendo processado
    button.innerHTML = '<i class="bi bi-hourglass-split"></i> Aguarde';

    // Se todas as verifica√ß√µes passaram, criar usu√°rio no Firebase Authentication
    firebase.auth().createUserWithEmailAndPassword(email, senha)
        .then((result) => {
            const usuarioID = result.user.uid;
            const usuarioRef = firebase.database().ref('usuarios/' + usuarioID);

            // Adicionar detalhes adicionais ao banco de dados
            return usuarioRef.set({
                nome: nome,
                email: email,
                curso: curso,
                usuarioID: usuarioID,
                nascimento: nasc,
                genero: genero
            }).then(() => {
                verificaAutenticacao();

                // Realizar upload da foto de perfil, se uma imagem foi selecionada
                if (fotoPerfil) {
                    const storageRef = firebase.storage().ref(`usuarios/${usuarioID}/${fotoPerfil.name}`);
                    const uploadTask = storageRef.put(fotoPerfil);

                    uploadTask.on('state_changed',
                        (snapshot) => {
                            // Acompanhar progresso do upload aqui, se necess√°rio
                        },
                        (error) => {
                            console.error('Erro ao fazer upload da imagem:', error);
                        },
                        () => {
                            uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {
                                usuarioRef.update({ foto: downloadURL }).then(() => {
                                    alert('Usu√°rio cadastrado com sucesso!');
                                    window.location.href = 'menu.html';
                                }).catch((error) => {
                                    console.error('Erro ao atualizar a URL da nova foto:', error);
                                    alert(`Erro ao atualizar dados: ${error.message}`);
                                });
                            });
                        }
                    );
                } else {
                    alert('Usu√°rio cadastrado com sucesso!');
                    window.location.href = 'menu.html';
                }
            });
        })
        .catch(error => {
            alert(`N√£o foi poss√≠vel cadastrar o usu√°rio: ${errors[error.code]}`);
            button.innerHTML = '<i class="bi bi-person-plus"></i> Cadastrar';
        });
}




// Verifica se o usu√°rio est√° autenticado ao tentar carregar a foto de perfil
function verificaAutenticacao() {
    const usuario = firebase.auth().currentUser; // Obt√©m o usu√°rio autenticado no Firebase Authentication
    if (usuario) {
        console.log('Usu√°rio autenticado:', usuario.uid); // Exibe no console o ID do usu√°rio autenticado
        // Aqui voc√™ pode chamar a fun√ß√£o de cadastro de usu√°rio, se necess√°rio
    } else {
        console.log('Usu√°rio n√£o autenticado'); // Exibe no console se o usu√°rio n√£o estiver autenticado
    }
}

// Fun√ß√£o para verificar se o usu√°rio est√° logado
function verificaLogado() {
    firebase.auth().onAuthStateChanged(user => {
        if (user) { // Se existir um usu√°rio logado
            // Salvamos o ID do usu√°rio localmente
            localStorage.setItem('usuarioId', user.uid);

            // Elemento onde a imagem do usu√°rio ser√° exibida
            let imagem = document.getElementById('imagemUsuario');

            // Verifica se o usu√°rio fez login por meio de um provedor de terceiros (por exemplo, Google)
            if (user.providerData && user.providerData.length) {
                const provider = user.providerData[0].providerId;
                if (provider === 'google.com') {
                    // Exibe a imagem do perfil do Google ou o logo do Google, se a imagem n√£o estiver dispon√≠vel
                    if (user.photoURL) {
                        imagem.innerHTML += `<img src="${user.photoURL}" title="${user.displayName}" class="img rounded-circle minhaImagem" width="35" height="35"/>`;
                    } else {
                        imagem.innerHTML += `<img src="images/logo-google.svg" title="${user.displayName}" class="img rounded-circle minhaImagem" height="35" width="35"/>`;
                    }
                } else {
                    // Se n√£o for um login por provedor de terceiros, busca os dados do usu√°rio no banco de dados
                    const usuarioRef = firebase.database().ref(`usuarios/${user.uid}`);
                    usuarioRef.once('value', snapshot => {
                        if (snapshot.exists()) {
                            const usuarioData = snapshot.val();
                            const nomeUsuario = usuarioData.nome;
                            const fotoUsuario = usuarioData.foto;

                            // Exibe a imagem do perfil do usu√°rio ou o logo padr√£o, se a imagem n√£o estiver dispon√≠vel
                            if (fotoUsuario) {
                                imagem.innerHTML += `<img src="${fotoUsuario}" title="${nomeUsuario}" class="img rounded-circle minhaImagem" height="35" width="35"/>`;
                            } else {
                                imagem.innerHTML += `<img src="images/logo-google.svg" title="${nomeUsuario}" class="img rounded-circle minhaImagem" height="35" width="35"/>`;
                            }
                        }
                    }).catch(error => {
                        console.error('Erro ao carregar nome do usu√°rio:', error);
                    });
                }
            }

            carregaUsuarios(); // Fun√ß√£o para carregar usu√°rios do sistema
            carregarUsuariosGoogle(); // Fun√ß√£o para carregar usu√°rios autenticados pelo Google
        } else {
            localStorage.removeItem('usuarioId'); // Remove o ID do usu√°rio localmente
            window.location.href = 'index.html'; // Redireciona para a p√°gina de login se n√£o houver usu√°rio logado
        }
    });
}



// Fun√ß√£o para fazer logout no Firebase
function logoutFirebase() {
    firebase.auth().signOut() // Chama o m√©todo signOut do Firebase Authentication para fazer logout do usu√°rio
        .then(function () {
            localStorage.removeItem('usuarioId'); // Remove o ID do usu√°rio localmente ao fazer logout
            window.location.href = 'index.html'; // Redireciona para a p√°gina de login ap√≥s o logout
        })
        .catch(function (error) {
            alert(`N√£o foi poss√≠vel efetuar o logout: ${errors[error.code]}`); // Exibe um alerta em caso de erro durante o logout
        });
}

// Fun√ß√£o ass√≠ncrona para finalizar um pedido
async function finalizarPedido(pedido) {
    let usuarioAtual = firebase.auth().currentUser; // Obt√©m o usu√°rio autenticado no Firebase

    try {
        // Obt√©m uma lista com os nomes dos itens do pedido
        const nomesItens = pedido.map(item => item.nome);

        // Calcula o pre√ßo total do pedido somando os pre√ßos de cada item multiplicado pela quantidade
        const precoTotal = pedido.reduce((total, item) => {
            return total + (item.preco * item.quantidade);
        }, 0);

        let nomeUsuario = usuarioAtual.displayName; // Obt√©m o nome do usu√°rio autenticado

        // Se o nome do usu√°rio n√£o estiver definido e se ele fez login por meio de um provedor de terceiros (por ex: Google)
        if (!nomeUsuario && usuarioAtual.providerData && usuarioAtual.providerData.length > 0) {
            // Obt√©m informa√ß√µes adicionais do usu√°rio no banco de dados
            const snapshot = await firebase.database().ref('usuarios/' + usuarioAtual.uid).once('value');
            const usuarioData = snapshot.val();
            if (usuarioData && usuarioData.nome) {
                nomeUsuario = usuarioData.nome; // Define o nome do usu√°rio com base nos dados do banco de dados
            }
        }

        // Cria um resumo do pedido com informa√ß√µes como nomes dos itens, ID do usu√°rio, pre√ßo total, nome do usu√°rio e timestamp
        const pedidoResumo = {
            nomesItens: nomesItens,
            uid: usuarioAtual.uid,
            precoTotal: precoTotal.toFixed(2), // Formata o pre√ßo total com duas casas decimais
            nomeUsuario: nomeUsuario,
            timestamp: firebase.database.ServerValue.TIMESTAMP // Adiciona um timestamp do servidor
        };

        // Cria um detalhamento do pedido com informa√ß√µes de cada item (nome, quantidade, valor unit√°rio)
        const pedidoDetalhado = pedido.map(item => {
            return {
                nome: item.nome,
                quantidade: item.quantidade,
                valorUnitario: item.preco
            };
        });

        // Cria uma nova refer√™ncia para o pedido no banco de dados e define os dados do resumo do pedido
        const novoPedidoRef = await firebase.database().ref('pedidos').push();
        await novoPedidoRef.set(pedidoResumo);

        // Define os detalhes dos itens do pedido na refer√™ncia do novo pedido criado
        await novoPedidoRef.child('itens').set(pedidoDetalhado);

        alert('‚úî Pedido inclu√≠do com sucesso!'); // Exibe um alerta informando que o pedido foi inclu√≠do com sucesso
    } catch (error) {
        alert(`‚ùå Erro ao finalizar: ${errors[error.code]}`); // Exibe um alerta em caso de erro ao finalizar o pedido
    }
}


// Fun√ß√£o ass√≠ncrona para carregar os pedidos do usu√°rio
async function carregaPedidos() {
    let tabela = document.getElementById('dadosTabelaPedidos'); // Obt√©m a refer√™ncia da tabela onde os pedidos ser√£o exibidos
    let usuarioAtual = firebase.auth().currentUser; // Obt√©m o usu√°rio atualmente autenticado

    if (!usuarioAtual) {
        // Se o usu√°rio n√£o est√° definido, aguarda a autentica√ß√£o antes de carregar os pedidos
        firebase.auth().onAuthStateChanged((user) => {
            if (user) {
                usuarioAtual = user; // Define o usu√°rio atual ap√≥s a autentica√ß√£o
                carregarPedidos(usuarioAtual, tabela); // Chama a fun√ß√£o para carregar os pedidos, passando o usu√°rio e a tabela como par√¢metros
            } else {
                // Usu√°rio n√£o autenticado
                console.log('Usu√°rio n√£o autenticado');
            }
        });
    } else {
        // Se o usu√°rio j√° est√° definido, carrega os pedidos imediatamente
        carregarPedidos(usuarioAtual, tabela); // Chama a fun√ß√£o para carregar os pedidos, passando o usu√°rio e a tabela como par√¢metros
    }
}

// Fun√ß√£o para carregar os pedidos na tabela, recebendo o usu√°rio atual e a refer√™ncia da tabela
function carregarPedidos(usuarioAtual, tabela) {
    // Acessa a refer√™ncia 'pedidos' no banco de dados, ordenando-os por chave, e obt√©m os dados uma vez
    firebase.database().ref('pedidos').orderByKey().once('value', (snapshot) => {
        // Limpa o conte√∫do da tabela e insere a primeira linha com cabe√ßalhos
        tabela.innerHTML = `
            <tr class='table-warning '>
                <th>Nome do Usu√°rio</th>
                <th>ID do Pedido</th>
                <th>Itens</th>
                <th>Pre√ßo Total</th>
                <th>Op√ß√µes</th>
            </tr>`;

        // Verifica se h√° algum pedido existente no snapshot
        if (!snapshot.exists()) {
            // Se n√£o houver pedidos, cria uma linha na tabela informando que n√£o h√° pedidos
            const semPedidosLinha = tabela.insertRow();
            const celulaSemPedidos = semPedidosLinha.insertCell();
            celulaSemPedidos.textContent = 'Ainda n√£o existe nenhum pedido no sistema!';
            celulaSemPedidos.colSpan = 5; // Mescla as colunas para preencher a linha
            celulaSemPedidos.classList.add('table-danger');
        } else {
            // Se houver pedidos, itera sobre cada pedido no snapshot
            snapshot.forEach((pedido) => {
                const pedidoData = pedido.val(); // Obt√©m os dados do pedido
                const pedidoID = pedido.key; // Obt√©m o ID do pedido

                // Insere uma nova linha na tabela e preenche as c√©lulas com os dados do pedido
                const novaLinha = tabela.insertRow();
                novaLinha.insertCell().textContent = pedidoData.nomeUsuario; // Nome do usu√°rio
                novaLinha.insertCell().textContent = pedidoID; // ID do pedido
                novaLinha.insertCell().textContent = pedidoData.nomesItens.join(', '); // Itens do pedido
                novaLinha.insertCell().textContent = `R$ ${pedidoData.precoTotal}`; // Pre√ßo total do pedido

                const botoesCell = novaLinha.insertCell(); // C√©lula para os bot√µes de a√ß√£o

                // Verifica se o usu√°rio atual √© o mesmo que fez o pedido para definir os bot√µes apropriados
                if (usuarioAtual.uid === pedidoData.uid) {
                    // Se for o usu√°rio que fez o pedido, cria um bot√£o para remover o pedido
                    const removerBtn = document.createElement('button');
                    removerBtn.classList.add('btn', 'btn-sm', 'btn-outline-danger');
                    removerBtn.innerHTML = '<i class="bi bi-trash3-fill"></i> Excluir';
                    removerBtn.onclick = () => removerPedido(pedidoID); // Chama a fun√ß√£o para remover o pedido

                    botoesCell.appendChild(removerBtn); // Adiciona o bot√£o na c√©lula de bot√µes
                } else {
                    // Se n√£o for o usu√°rio que fez o pedido, mostra um bot√£o indispon√≠vel
                    const indisponivelBtn = document.createElement('button');
                    indisponivelBtn.classList.add('btn', 'btn-sm', 'btn-outline-secondary');
                    indisponivelBtn.innerHTML = '<i class="bi bi-exclamation-triangle-fill"></i> Indispon√≠vel';

                    botoesCell.appendChild(indisponivelBtn); // Adiciona o bot√£o na c√©lula de bot√µes
                }
            });
        }
    });
}




// Fun√ß√£o para carregar os usu√°rios na tabela
function carregaUsuarios() {
    const tabelaUsuarios = document.getElementById('dadosTabelaUsuarios'); // Obt√©m a refer√™ncia da tabela de usu√°rios no HTML
    const usuarioAtual = firebase.auth().currentUser; // Obt√©m o usu√°rio atualmente autenticado

    if (!usuarioAtual) {
       
        return;
    }

    // Acessa a refer√™ncia 'usuarios' no banco de dados e obt√©m os dados uma vez
    firebase.database().ref('usuarios').once('value', (snapshot) => {

        // Limpa o conte√∫do da tabela e insere a primeira linha com cabe√ßalhos
        tabelaUsuarios.innerHTML = `
            <tr class='table-success'>
                <th>Id do Usu√°rio</th>
                <th>Nome</th>
                <th>Nascimento</th>
                <th>G√™nero</th>
                <th>Email</th>
                <th>Curso</th>
                <th>A√ß√µes</th>
            </tr>`

        // Verifica se h√° algum usu√°rio cadastrado no snapshot
        if (!snapshot.exists()) {
            // Se n√£o houver usu√°rios, cria uma linha na tabela informando que n√£o h√° usu√°rios cadastrados e encerra a fun√ß√£o
            tabelaUsuarios.innerHTML += `
                <tr class='table-danger'>
                    <td colspan='7'>N√£o existem usu√°rios cadastrados.</td>
                </tr>`;
            return;
        }
        // Itera sobre cada usu√°rio no snapshot
        snapshot.forEach((usuario) => {
            const usuarioData = usuario.val(); // Obt√©m os dados do usu√°rio
            const usuarioID = usuario.key; // Obt√©m o ID do usu√°rio

            // Insere uma nova linha na tabela e preenche as c√©lulas com os dados do usu√°rio
            const novaLinha = tabelaUsuarios.insertRow();
            novaLinha.insertCell().textContent = usuarioID; // ID do usu√°rio
            novaLinha.insertCell().textContent = usuarioData.nome || '-'; // Nome do usu√°rio (ou '-' se n√£o houver)
            novaLinha.insertCell().textContent = usuarioData.nascimento || '-'; // Data de nascimento (ou '-' se n√£o houver)
            novaLinha.insertCell().textContent = usuarioData.genero || '-'; // G√™nero (ou '-' se n√£o houver)
            novaLinha.insertCell().textContent = usuarioData.email || '-'; // Email (ou '-' se n√£o houver)
            novaLinha.insertCell().textContent = usuarioData.curso || '-'; // Curso (ou '-' se n√£o houver)

            const cellAcoes = novaLinha.insertCell(); // C√©lula para os bot√µes de a√ß√£o

            // Verifica se o usu√°rio atual √© o mesmo que est√° sendo exibido na linha atual da tabela
            if (usuarioAtual.uid === usuarioID) {
                // Se for o usu√°rio atual, cria bot√µes para editar e excluir o usu√°rio
                const btnEditar = document.createElement('button');
                btnEditar.classList.add('btn', 'btn-sm', 'btn-outline-warning', 'me-1');
                btnEditar.innerHTML = '<i class="bi bi-pencil-square"></i> Editar';
                btnEditar.onclick = () => {
                    window.location.href = 'edicao.html'; // Redireciona para a p√°gina de edi√ß√£o do usu√°rio
                }

                const btnExcluir = document.createElement('button');
                btnExcluir.classList.add('btn', 'btn-sm', 'btn-outline-danger');
                btnExcluir.innerHTML = '<i class="bi bi-person-x"></i> Excluir';
                btnExcluir.onclick = () => excluirUsuario(usuarioID); // Chama a fun√ß√£o para excluir o usu√°rio

                cellAcoes.appendChild(btnEditar); // Adiciona o bot√£o de editar na c√©lula de a√ß√µes
                cellAcoes.appendChild(btnExcluir); // Adiciona o bot√£o de excluir na c√©lula de a√ß√µes
            } else {
                // Se n√£o for o usu√°rio atual, mostra um bot√£o indispon√≠vel
                const btnIndisponivel = document.createElement('button');
                btnIndisponivel.classList.add('btn', 'btn-sm', 'btn-outline-secondary');
                btnIndisponivel.innerHTML = '<i class="bi bi-exclamation-triangle-fill"></i> Indispon√≠vel';

                cellAcoes.appendChild(btnIndisponivel); // Adiciona o bot√£o indispon√≠vel na c√©lula de a√ß√µes
            }
        });
    });
}


// Fun√ß√£o ass√≠ncrona para excluir um usu√°rio
async function excluirUsuario(usuarioID) {
    // Confirma√ß√£o com o usu√°rio para verificar se deseja realmente excluir o usu√°rio
    if (confirm('Deseja realmente excluir o usu√°rio?')) {
        const user = firebase.auth().currentUser; // Obt√©m o usu√°rio atualmente autenticado

        // Prompt para o usu√°rio inserir a senha atual para confirmar a exclus√£o
        const senhaAtual = prompt('Digite sua senha atual:');

        const credential = firebase.auth.EmailAuthProvider.credential(
            user.email,
            senhaAtual
        ); // Cria credenciais de autentica√ß√£o com base no email e senha fornecidos

        try {
            // Reautentica o usu√°rio atual com as credenciais fornecidas
            await user.reauthenticateWithCredential(credential);

            // Exclui o usu√°rio autenticado
            await user.delete();

            // Exclui os dados do usu√°rio da cole√ß√£o "usuarios" no banco de dados
            await firebase.database().ref(`usuarios/${usuarioID}`).remove();

            alert('Usu√°rio exclu√≠do com sucesso.'); // Exibe um alerta informando que o usu√°rio foi exclu√≠do com sucesso
            console.log('Usu√°rio exclu√≠do com sucesso'); // Registra no console que o usu√°rio foi exclu√≠do com sucesso
        } catch (error) {
            console.error('Erro ao excluir usu√°rio:', error.message); // Registra no console caso ocorra um erro durante a exclus√£o
            alert('Erro ao excluir usu√°rio:', error.message); // Exibe um alerta em caso de erro durante a exclus√£o
        }
    }
}


function editarUsuario(event) {
    event.preventDefault(); // Previne o comportamento padr√£o do evento (submiss√£o do formul√°rio)

    const btnSalvar = document.getElementById('btnSalvar'); // Refer√™ncia ao bot√£o de salvar

    // Obten√ß√£o dos valores dos campos do formul√°rio
    const novoNome = document.getElementById('novoNome').value;
    const novaNasc = document.getElementById('novaNasc').value;
    const novoCurso = document.getElementById('novoCurso').value;
    const novoGenero = document.getElementById('novoGenero').value;
    const novaFotoPerfil = document.getElementById('novaFotoPerfil').files[0]; // Nova foto de perfil

    const usuarioAtual = firebase.auth().currentUser; // Obt√©m o usu√°rio atual

    if (usuarioAtual) { // Verifica se h√° um usu√°rio autenticado
        // Verifica se o nome e a data de nascimento n√£o est√£o vazios
        if (novoNome.trim() !== '' && novaNasc.trim() !== '') {
            // Verifica se h√° uma nova foto de perfil selecionada e a extens√£o do arquivo
            if (novaFotoPerfil) {
                // Verifica a extens√£o da imagem selecionada
                const allowedExtensions = ['jpg', 'jpeg', 'png', 'gif'];
                const fileExtension = novaFotoPerfil.name.split('.').pop().toLowerCase();

                if (!allowedExtensions.includes(fileExtension)) {
                    // Alerta se a extens√£o do arquivo n√£o for suportada
                    alert('Extens√£o de arquivo n√£o suportada. Por favor, selecione uma imagem com as extens√µes: jpg, jpeg, png ou gif.');
                    return;
                }
            }

            // Confirma√ß√£o da altera√ß√£o dos dados
            if (confirm('Confirma a altera√ß√£o dos dados?')) {

                btnSalvar.innerHTML = ''; // Limpa o texto existente no bot√£o antes de definir 'Aguarde'
                btnSalvar.innerHTML = `<i class="bi bi-hourglass-split"></i> Aguarde`; // Define o texto do bot√£o para indicar que est√° processando

                const usuarioRef = firebase.database().ref(`usuarios/${usuarioAtual.uid}`); // Refer√™ncia ao n√≥ do usu√°rio no banco de dados

                // Atualiza os dados do usu√°rio no banco de dados
                usuarioRef.update({
                    nome: novoNome,
                    nascimento: novaNasc,
                    curso: novoCurso,
                    genero: novoGenero
                }).then(() => {
                    // Se houver nova foto de perfil selecionada, realiza o upload
                    if (novaFotoPerfil) {
                        const storageRef = firebase.storage().ref(`usuarios/${usuarioAtual.uid}/${novaFotoPerfil.name}`);
                        const uploadTask = storageRef.put(novaFotoPerfil);

                        uploadTask.on('state_changed',
                            (snapshot) => {
                                // Acompanha o progresso do upload aqui, se necess√°rio
                            },
                            (error) => {
                                console.error('Erro ao fazer upload da nova imagem:', error);
                            },
                            () => {
                                // Upload conclu√≠do com sucesso
                                uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {
                                    // Salva a URL da nova imagem no banco de dados
                                    usuarioRef.update({ foto: downloadURL }).then(() => {
                                        // Alerta e redirecionamento para o menu ap√≥s a conclus√£o do processo
                                        alert('Dados editados com sucesso! Redirecionando para o Menu');
                                        window.location.href = 'menu.html';
                                    }).catch((error) => {
                                        // Tratamento de erro ao atualizar a URL da nova foto
                                        console.error('Erro ao atualizar a URL da nova foto:', error);
                                        alert(`Erro ao atualizar dados: ${error.message}`);

                                        // Restaura√ß√£o do texto do bot√£o em caso de erro
                                        btnSalvar.innerHTML = `<i class="bi bi-person-fill-check"></i> Alterar`;
                                    });
                                });
                            }
                        );
                    } else {
                        // Alerta e redirecionamento para o menu ap√≥s a conclus√£o do processo
                        alert('Dados editados com sucesso! Redirecionando para o Menu');
                        window.location.href = 'menu.html';
                    }
                }).catch(error => {
                    // Tratamento de erro ao atualizar os dados do usu√°rio no banco de dados
                    console.error('Erro ao atualizar os dados do usu√°rio:', error);
                    alert(`Erro ao atualizar dados: ${error.message}`);

                    // Restaura√ß√£o do texto do bot√£o em caso de erro
                    btnSalvar.innerHTML = `<i class="bi bi-person-fill-check"></i> Alterar`;
                });
            } else {
                // Reset do formul√°rio em caso de cancelamento da edi√ß√£o
                const form = document.getElementById('formDeEdicao');
                form.reset();
                return;
            }
        } else {
            // Alerta se campos obrigat√≥rios estiverem vazios
            alert('Por favor, preencha ao menos o nome e a data de nascimento.');
        }
    }
}



function carregaEmail(event) {
    event.preventDefault(); // Impede o comportamento padr√£o do evento (preven√ß√£o de submiss√£o do formul√°rio)

    const campoEmail = document.getElementById('novoEmail'); // Obt√©m a refer√™ncia ao campo de e-mail no formul√°rio
    const notifDiv = document.getElementById('notif'); // Obt√©m a refer√™ncia √† div 'notif' onde ser√° exibida a mensagem

    const usuarioLogado = firebase.auth().currentUser; // Obt√©m o usu√°rio atualmente autenticado
    const emailUsuario = usuarioLogado.email; // Obt√©m o email do usu√°rio autenticado

    campoEmail.value = emailUsuario; // Define o valor do campo de e-mail como o e-mail do usu√°rio logado

    // Mensagem a ser exibida na div 'notif'
    const mensagem = "A fun√ß√£o de alterar o e-mail √© bloqueada por seguran√ßa. Caso necessite contate o Admin!";
    notifDiv.textContent = mensagem; // Define o texto da div 'notif' como a mensagem acima para informar que a fun√ß√£o est√° bloqueada por quest√µes de seguran√ßa
}




function removerPedido(pedidoID) {
    // L√≥gica para remover o pedido com o ID espec√≠fico do Firebase

    const confirmacao = confirm('Tem certeza que deseja excluir este pedido?'); // Exibe uma caixa de di√°logo de confirma√ß√£o ao usu√°rio

    if (confirmacao) { // Se a confirma√ß√£o for verdadeira (usu√°rio confirmou)
        firebase.database().ref(`pedidos/${pedidoID}`).remove(); // Remove o pedido com o ID espec√≠fico do n√≥ 'pedidos' no Firebase Realtime Database
        carregaPedidos(); // Recarrega a lista de pedidos ap√≥s a remo√ß√£o
    } else {
        carregaPedidos(); // Recarrega a lista de pedidos, pois o usu√°rio cancelou a remo√ß√£o
    }
}




firebase.auth().onAuthStateChanged((user) => { // Observa mudan√ßas no estado de autentica√ß√£o do usu√°rio
    if (user) { // Se h√° um usu√°rio autenticado
        const usuarioAtual = firebase.auth().currentUser; // Obt√©m o usu√°rio atualmente autenticado
        const emailUsuario = usuarioAtual.email; // Obt√©m o e-mail do usu√°rio

        let usuarioGoogleExists = false; // Inicializa vari√°vel para verificar se o usu√°rio existe no banco de dados "usuariosGoogle"
        let usuarioExists = false; // Inicializa vari√°vel para verificar se o usu√°rio existe no banco de dados "usuarios"

        // Verifica se o usu√°rio existe no banco de dados "usuariosGoogle" com o mesmo email
        firebase.database().ref('usuariosGoogle').orderByChild('email').equalTo(emailUsuario).once('value')
            .then((snapshotGoogle) => {
                usuarioGoogleExists = snapshotGoogle.exists(); // Atualiza a vari√°vel com base na exist√™ncia do usu√°rio no banco de dados "usuariosGoogle"

                // Verifica se o usu√°rio existe no banco de dados "usuarios" com o mesmo email
                return firebase.database().ref('usuarios').orderByChild('email').equalTo(emailUsuario).once('value');
            })
            .then((snapshotUsuarios) => {
                usuarioExists = snapshotUsuarios.exists(); // Atualiza a vari√°vel com base na exist√™ncia do usu√°rio no banco de dados "usuarios"

                if (!usuarioGoogleExists && !usuarioExists) { // Se o usu√°rio n√£o existe em nenhum dos bancos de dados
                    const nomeUsuario = usuarioAtual.displayName; // Obt√©m o nome do usu√°rio
                    const provedor = 'Google'; // Define o provedor como 'Google'
                    const idUsuario = usuarioAtual.uid; // Obt√©m o ID do usu√°rio

                    // Cria um novo registro para o usu√°rio no banco de dados "usuariosGoogle"
                    firebase.database().ref('usuariosGoogle').push({
                        nome: nomeUsuario,
                        email: emailUsuario,
                        provedor: provedor,
                        id: idUsuario
                    })
                        .then(() => {
                            console.log('Novo usu√°rio do Google cadastrado com sucesso em usuariosGoogle'); // Exibe mensagem de sucesso
                        })
                        .catch((error) => {
                            console.error('Erro ao salvar informa√ß√µes do usu√°rio do Google em usuariosGoogle:', error.message); // Exibe mensagem de erro se houver algum problema
                        });
                } else {
                    console.log('Usu√°rio j√° existe em pelo menos um dos bancos de dados'); // Informa que o usu√°rio j√° est√° registrado em algum banco de dados
                }
            })
            .catch((error) => {
                console.error('Erro ao verificar se o usu√°rio existe nos bancos de dados:', error.message); // Exibe mensagem de erro caso haja problema na verifica√ß√£o
            });
    }
});


function verificaDonoRegistro(usuarioID, usuarioAtual) {
    return usuarioAtual && usuarioAtual.uid === usuarioID;
}

function carregarUsuariosGoogle() {
    // Obt√©m a refer√™ncia do elemento HTML que representa a tabela de usu√°rios do Google
    const tabelaUsuariosGoogle = document.getElementById('dadosTabelaUsuariosGoogle');

    // Listener para detectar mudan√ßas na autentica√ß√£o do Firebase
    firebase.auth().onAuthStateChanged((user) => {
        // Verifica se h√° um usu√°rio autenticado
        if (user) {
            // Obt√©m o usu√°rio autenticado no Firebase
            const usuarioAtual = firebase.auth().currentUser;

            // Acessa a refer√™ncia da base de dados para os usu√°rios do Google
            firebase.database().ref('usuariosGoogle').once('value')
                .then((snapshot) => {
                    // Limpa o conte√∫do da tabela e define o cabe√ßalho
                    tabelaUsuariosGoogle.innerHTML = `
                        <tr class='table-info'>
                            <th>Id do Usu√°rio</th>
                            <th>Nome</th>
                            <th>Email</th>
                            <th>Provedor</th>
                            <th>A√ß√µes</th>
                        </tr>`;

                    // Verifica se n√£o existem usu√°rios cadastrados
                    if (!snapshot.exists()) {
                        // Adiciona uma linha informando que n√£o h√° usu√°rios cadastrados
                        tabelaUsuariosGoogle.innerHTML += `
                            <tr class='table-danger'>
                                <td colspan='5'>N√£o existem usu√°rios cadastrados.</td>
                            </tr>`;
                        return; // Encerra a fun√ß√£o
                    }

                    // Itera sobre cada usu√°rio retornado pela consulta
                    snapshot.forEach((usuario) => {
                        const usuarioData = usuario.val(); // Obt√©m os dados do usu√°rio
                        const usuarioEmail = usuarioData.email || '-'; // Obt√©m o email ou define um valor padr√£o '-'
                        const usuarioID = usuarioData.id; // Obt√©m o ID do usu√°rio

                        // Cria uma nova linha na tabela e preenche as c√©lulas com os dados do usu√°rio
                        const novaLinha = tabelaUsuariosGoogle.insertRow();
                        novaLinha.insertCell().textContent = usuarioData.id || '-';
                        novaLinha.insertCell().textContent = usuarioData.nome || '-';
                        novaLinha.insertCell().textContent = usuarioEmail;
                        novaLinha.insertCell().textContent = usuarioData.provedor || '-';
                        const cellAcoes = novaLinha.insertCell();

                        // Verifica se o usu√°rio logado √© o dono do registro atual
                        if (verificaDonoRegistro(usuarioID, usuarioAtual)) {
                            // Cria um bot√£o para excluir a conta e define um evento de clique
                            const btnExcluir = document.createElement('button');
                            btnExcluir.classList.add('btn', 'btn-sm', 'btn-outline-danger');
                            btnExcluir.innerHTML = '<i class="bi bi-person-x"></i> Excluir conta';
                            btnExcluir.onclick = () => excluirContaGoogle(usuarioID);

                            // Adiciona o bot√£o √† c√©lula de a√ß√µes da tabela
                            cellAcoes.appendChild(btnExcluir);
                        } else {
                            // Cria um bot√£o indispon√≠vel para usu√°rios que n√£o s√£o donos do registro
                            const btnIndisponivel = document.createElement('button');
                            btnIndisponivel.classList.add('btn', 'btn-sm', 'btn-outline-secondary');
                            btnIndisponivel.innerHTML = '<i class="bi bi-exclamation-triangle-fill"></i> Indispon√≠vel';

                            // Adiciona o bot√£o indispon√≠vel √† c√©lula de a√ß√µes da tabela
                            cellAcoes.appendChild(btnIndisponivel);
                        }
                    });
                })
                .catch((error) => {
                    // Em caso de erro ao carregar os usu√°rios do Google, exibe uma mensagem de erro no console
                    console.error('Erro ao carregar usu√°rios do Google:', error.message);
                });
        } else {
            // Se n√£o houver usu√°rio autenticado, exibe uma mensagem no console
            console.log('Usu√°rio n√£o autenticado.');
        }
    });
}






function excluirContaGoogle(usuarioID) {
    // Solicita uma confirma√ß√£o para excluir a conta do Google
    const confirmacao = confirm('Tem certeza que deseja excluir sua conta?');

    if (confirmacao) { // Se a confirma√ß√£o for positiva
        const usuarioAtual = firebase.auth().currentUser; // Obt√©m o usu√°rio atualmente autenticado

        firebase.database().ref('usuariosGoogle/' + usuarioID).remove() // Remove os dados do usu√°rio do banco de dados 'usuariosGoogle'
            .then(() => {
                logoutFirebase(); // Realiza o logout do usu√°rio
                return usuarioAtual.unlink('google.com'); // Desvincula a conta do Google

            })
            .then(() => {
                console.log('Conta do usu√°rio do Google exclu√≠da com sucesso'); // Exibe uma mensagem indicando a exclus√£o bem-sucedida
                carregarUsuariosGoogle(); // Atualiza a tabela de usu√°rios do Google ap√≥s a exclus√£o

            })
            .catch((error) => {
                // Em caso de erro, pode ser tratado aqui
            });
    }
}



//mapear c√≥digos de erro que podem ser recebidos ao trabalhar com autentica√ß√£o no Firebase
const errors = {
    'auth/app-deleted': 'O banco de dados n√£o foi localizado.',
    'auth/invalid-login-credentials': 'Usu√°rio n√£o cadastrado',
    'auth/expired-action-code': 'O c√≥digo da a√ß√£o o ou link expirou.',
    'auth/invalid-action-code': 'O c√≥digo da a√ß√£o √© inv√°lido. Isso pode acontecer se o c√≥digo estiver malformado ou j√° tiver sido usado.',
    'auth/user-disabled': 'O usu√°rio correspondente √† credencial fornecida foi desativado.',
    'auth/user-not-found': 'O usu√°rio n√£o correponde √† nenhuma credencial.',
    'auth/weak-password': 'A senha √© muito fraca. Deve conter ao menos 6 caracteres',
    'auth/email-already-in-use': 'J√° existi uma conta com o endere√ßo de email fornecido.',
    'auth/invalid-email': 'O endere√ßo de e-mail n√£o √© v√°lido.',
    'auth/operation-not-allowed': 'O tipo de conta correspondente √† esta credencial, ainda n√£o encontra-se ativada.',
    'auth/account-exists-with-different-credential': 'E-mail j√° associado a outra conta.',
    'auth/auth-domain-config-required': 'A configura√ß√£o para autentica√ß√£o n√£o foi fornecida.',
    'auth/credential-already-in-use': 'J√° existe uma conta para esta credencial.',
    'auth/operation-not-supported-in-this-environment': 'Esta opera√ß√£o n√£o √© suportada no ambiente que est√° sendo executada. Verifique se deve ser http ou https.',
    'auth/timeout': 'Excedido o tempo de resposta. O dom√≠nio pode n√£o estar autorizado para realizar opera√ß√µes.',
    'auth/missing-android-pkg-name': 'Deve ser fornecido um nome de pacote para instala√ß√£o do aplicativo Android.',
    'auth/missing-continue-uri': 'A pr√≥xima URL deve ser fornecida na solicita√ß√£o.',
    'auth/missing-ios-bundle-id': 'Deve ser fornecido um nome de pacote para instala√ß√£o do aplicativo iOS.',
    'auth/invalid-continue-uri': 'A pr√≥xima URL fornecida na solicita√ß√£o √© inv√°lida.',
    'auth/unauthorized-continue-uri': 'O dom√≠nio da pr√≥xima URL n√£o est√° na lista de autoriza√ß√µes.',
    'auth/invalid-dynamic-link-domain': 'O dom√≠nio de link din√¢mico fornecido, n√£o est√° autorizado ou configurado no projeto atual.',
    'auth/argument-error': 'Verifique a configura√ß√£o de link para o aplicativo.',
    'auth/invalid-persistence-type': 'O tipo especificado para a persist√™ncia dos dados √© inv√°lido.',
    'auth/unsupported-persistence-type': 'O ambiente atual n√£o suportar o tipo especificado para persist√™ncia dos dados.',
    'auth/invalid-credential': 'A credencial expirou ou est√° mal formada.',
    'auth/wrong-password': 'Senha incorreta.',
    'auth/invalid-verification-code': 'O c√≥digo de verifica√ß√£o da credencial n√£o √© v√°lido.',
    'auth/invalid-verification-id': 'O ID de verifica√ß√£o da credencial n√£o √© v√°lido.',
    'auth/custom-token-mismatch': 'O token est√° diferente do padr√£o solicitado.',
    'auth/invalid-custom-token': 'O token fornecido n√£o √© v√°lido.',
    'auth/captcha-check-failed': 'O token de resposta do reCAPTCHA n√£o √© v√°lido, expirou ou o dom√≠nio n√£o √© permitido.',
    'auth/invalid-phone-number': 'O n√∫mero de telefone est√° em um formato inv√°lido (padr√£o E.164).',
    'auth/missing-phone-number': 'O n√∫mero de telefone √© requerido.',
    'auth/quota-exceeded': 'A cota de SMS foi excedida.',
    'auth/cancelled-popup-request': 'Somente uma solicita√ß√£o de janela pop-up √© permitida de uma s√≥ vez.',
    'auth/popup-blocked': 'A janela pop-up foi bloqueado pelo navegador.',
    'auth/popup-closed-by-user': 'A janela pop-up foi fechada pelo usu√°rio sem concluir o login no provedor.',
    'auth/unauthorized-domain': 'O dom√≠nio do aplicativo n√£o est√° autorizado para realizar opera√ß√µes.',
    'auth/invalid-user-token': 'O usu√°rio atual n√£o foi identificado.',
    'auth/user-token-expired': 'O token do usu√°rio atual expirou.',
    'auth/null-user': 'O usu√°rio atual √© nulo.',
    'auth/app-not-authorized': 'Aplica√ß√£o n√£o autorizada para autenticar com a chave informada.',
    'auth/invalid-api-key': 'A chave da API fornecida √© inv√°lida.',
    'auth/network-request-failed': 'Falha de conex√£o com a rede.',
    'auth/requires-recent-login': 'O √∫ltimo hor√°rio de acesso do usu√°rio n√£o atende ao limite de seguran√ßa.',
    'auth/too-many-requests': 'As solicita√ß√µes foram bloqueadas devido a atividades incomuns. Tente novamente depois que algum tempo.',
    'auth/web-storage-unsupported': 'O navegador n√£o suporta armazenamento ou se o usu√°rio desativou este recurso.',
    'auth/invalid-claims': 'Os atributos de cadastro personalizado s√£o inv√°lidos.',
    'auth/claims-too-large': 'O tamanho da requisi√ß√£o excede o tamanho m√°ximo permitido de 1 Megabyte.',
    'auth/id-token-expired': 'O token informado expirou.',
    'auth/id-token-revoked': 'O token informado perdeu a validade.',
    'auth/invalid-argument': 'Um argumento inv√°lido foi fornecido a um m√©todo.',
    'auth/invalid-creation-time': 'O hor√°rio da cria√ß√£o precisa ser uma data UTC v√°lida.',
    'auth/invalid-disabled-field': 'A propriedade para usu√°rio desabilitado √© inv√°lida.',
    'auth/invalid-display-name': 'O nome do usu√°rio √© inv√°lido.',
    'auth/invalid-email-verified': 'O e-mail √© inv√°lido.',
    'auth/invalid-hash-algorithm': 'O algoritmo de HASH n√£o √© uma criptografia compat√≠vel.',
    'auth/invalid-hash-block-size': 'O tamanho do bloco de HASH n√£o √© v√°lido.',
    'auth/invalid-hash-derived-key-length': 'O tamanho da chave derivada do HASH n√£o √© v√°lido.',
    'auth/invalid-hash-key': 'A chave de HASH precisa ter um buffer de byte v√°lido.',
    'auth/invalid-hash-memory-cost': 'O custo da mem√≥ria HASH n√£o √© v√°lido.',
    'auth/invalid-hash-parallelization': 'O carregamento em paralelo do HASH n√£o √© v√°lido.',
    'auth/invalid-hash-rounds': 'O arredondamento de HASH n√£o √© v√°lido.',
    'auth/invalid-hash-salt-separator': 'O campo do separador de SALT do algoritmo de gera√ß√£o de HASH precisa ser um buffer de byte v√°lido.',
    'auth/invalid-id-token': 'O c√≥digo do token informado n√£o √© v√°lido.',
    'auth/invalid-last-sign-in-time': 'O √∫ltimo hor√°rio de login precisa ser uma data UTC v√°lida.',
    'auth/invalid-page-token': 'A pr√≥xima URL fornecida na solicita√ß√£o √© inv√°lida.',
    'auth/invalid-password': 'A senha √© inv√°lida, precisa ter pelo menos 6 caracteres.',
    'auth/invalid-password-hash': 'O HASH da senha n√£o √© v√°lida.',
    'auth/invalid-password-salt': 'O SALT da senha n√£o √© v√°lido.',
    'auth/invalid-photo-url': 'A URL da foto de usu√°rio √© inv√°lido.',
    'auth/invalid-provider-id': 'O identificador de provedor n√£o √© compat√≠vel.',
    'auth/invalid-session-cookie-duration': 'A dura√ß√£o do COOKIE da sess√£o precisa ser um n√∫mero v√°lido em milissegundos, entre 5 minutos e 2 semanas.',
    'auth/invalid-uid': 'O identificador fornecido deve ter no m√°ximo 128 caracteres.',
    'auth/invalid-user-import': 'O registro do usu√°rio a ser importado n√£o √© v√°lido.',
    'auth/invalid-provider-data': 'O provedor de dados n√£o √© v√°lido.',
    'auth/maximum-user-count-exceeded': 'O n√∫mero m√°ximo permitido de usu√°rios a serem importados foi excedido.',
    'auth/missing-hash-algorithm': '√â necess√°rio fornecer o algoritmo de gera√ß√£o de HASH e seus par√¢metros para importar usu√°rios.',
    'auth/missing-uid': 'Um identificador √© necess√°rio para a opera√ß√£o atual.',
    'auth/reserved-claims': 'Uma ou mais propriedades personalizadas fornecidas usaram palavras reservadas.',
    'auth/session-cookie-revoked': 'O COOKIE da sess√£o perdeu a validade.',
    'auth/uid-alread-exists': 'O indentificador fornecido j√° est√° em uso.',
    'auth/email-already-exists': 'O e-mail fornecido j√° est√° em uso.',
    'auth/phone-number-already-exists': 'O telefone fornecido j√° est√° em uso.',
    'auth/project-not-found': 'Nenhum projeto foi encontrado.',
    'auth/insufficient-permission': 'A credencial utilizada n√£o tem permiss√£o para acessar o recurso solicitado.',
    'auth/internal-error': 'O servidor de autentica√ß√£o encontrou um erro inesperado ao tentar processar a solicita√ß√£o.'
}